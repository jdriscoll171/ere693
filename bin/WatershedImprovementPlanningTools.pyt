import os, sys, shutil, arcpy
import traceback, time

def log(message):
    arcpy.AddMessage(message)
    with file(sys.argv[0]+".log", 'a') as logFile:
        logFile.write("%s:\t%s\n" % (time.asctime(), message))
    
class Toolbox(object):
    def __init__(self):
        self.label = "WIP tools"
        self.alias = ""
        self.tools = [TopoHydro, ImpCov, Runoff]
        
class TopoHydro(object):
    def __init__(self):
        self.label = "Topography and Hydrology Analysis"
        self.description = "Establishes the watershed and stream network"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Input Digital Elevation Model",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Analysis Mask",
            name="Mask",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="Threshold accumulation for Stream formation (acres)",
            name="StreamFormation",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1, param2 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText, parameters[2].valueAsText))
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return

class ImpCov(object):
    def __init__(self):
        self.label = "Imperviousness Analysis"
        self.description = "Impervious area contributions"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Impervious Areas",
            name="ImperviousAreas",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Lakes",
            name="Lakes",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText))
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
class Runoff(object):
    def __init__(self):
        self.label = "Runoff Calculations"
        self.description = "Calculation of standard storm flows via USGS regression equations"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Curve Number",
            name="Landuse",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
						# -*- coding: utf-8 -*-
						# ---------------------------------------------------------------------------
						# HydrologyS2F-Task2.py
						# Created on: 2016-05-04 13:04:01.00000
						#   (generated by ArcGIS/ModelBuilder)
						# Description: 
						# ---------------------------------------------------------------------------
						
						# Import arcpy module
						import arcpy
						
						
						# Local variables:
						DEM = "DEM"
						Fill1 = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\Fill1"
						AnalysisMask = "AnalysisMask"
						AnalysisMaskRaster = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\AnalysisMaskRaster"
						Output_drop_raster = ""
						FlowDirection1 = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\FlowDirection1"
						FlowAccumulation1 = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\FlowAccumulation1"
						FlowAccumInAcres = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\FlowAccumInAcres"
						StreamReclass1000 = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\StreamReclass1000"
						StreamFeatureFinal = "\\\\hd.ad.syr.edu\\01\\454d4c\\Documents\\GISModeling\\Lab06\\Lab06Data.gdb\\StreamFeatureFinal"
						
						# Set Geoprocessing environments
						arcpy.env.snapRaster = "DEM"
						arcpy.env.extent = "2008480.2410905 751026.288687245 2056480.2410905 811226.288687245"
						arcpy.env.cellSize = "40"
						
						# Process: Fill
						arcpy.gp.Fill_sa(DEM, Fill1, "")
						
						# Process: Polygon to Raster
						arcpy.PolygonToRaster_conversion(AnalysisMask, "OBJECTID", AnalysisMaskRaster, "CELL_CENTER", "NONE", "40")
						
						# Process: Flow Direction
						tempEnvironment0 = arcpy.env.mask
						arcpy.env.mask = AnalysisMaskRaster
						arcpy.gp.FlowDirection_sa(Fill1, FlowDirection1, "NORMAL", Output_drop_raster)
						arcpy.env.mask = tempEnvironment0
						
						# Process: Flow Accumulation
						arcpy.gp.FlowAccumulation_sa(FlowDirection1, FlowAccumulation1, "", "FLOAT")
						
						# Process: Raster Calculator
						arcpy.gp.RasterCalculator_sa("\"%FlowAccumulation1%\"*((17213.44)/43560)", FlowAccumInAcres)
						
						# Process: Reclassify
						arcpy.gp.Reclassify_sa(FlowAccumInAcres, "Value", "0 1000 NODATA;1000 242411.5486795225 1", StreamReclass1000, "DATA")
						
						# Process: Stream to Feature
						arcpy.gp.StreamToFeature_sa(StreamReclass1000, FlowDirection1, StreamFeatureFinal, "SIMPLIFY")
						
            log("Parameter is %s" % (parameters[0].valueAsText))
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
		
